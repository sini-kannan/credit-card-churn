# -*- coding: utf-8 -*-
"""Suppu_Loveeeee.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SNdzcRdQyJ-fw4pSAAxikSnOECpB_rhQ
"""

import pandas as pd 
import numpy as np 
import os 
import seaborn as sns

for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

from google.colab import files
uploaded = files.upload()

import io
df = pd.read_csv(io.BytesIO(uploaded['BankChurners.csv']))
df = df.iloc[:, :-2]
df.head()

df['Attrition_Flag'].value_counts()

def attritionFlag(x):
    if x == 'Existing Customer':
      x = "Existing Customer"
      return x
    else:
      y = 'Attributed customer'
      return y
df['Attrition_Flag'] = df['Attrition_Flag'].apply(lambda x: attritionFlag(x))

from sklearn import preprocessing
import matplotlib.pyplot as plt 
plt.rc("font", size=14)
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
import seaborn as sns
sns.set(style="white")
sns.set(style="whitegrid", color_codes=True)

def histogram():
  df.Customer_Age.hist()
  plt.title('Histogram of Age')
  plt.xlabel('Age')
  plt.ylabel('Frequency')
  plt.savefig('hist_age')
histogram()

df.columns

df.Gender.value_counts()

df.Education_Level.value_counts()

df.groupby('Attrition_Flag').mean()

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
pd.crosstab(df.Card_Category,df.Attrition_Flag).plot(kind='bar')
plt.title('Card_Category Churn rate')
plt.xlabel('Card_Category')
plt.ylabel('Frequency of Customers')
#plt.savefig('purchase_fre_job')

table=pd.crosstab(df.Marital_Status,df.Attrition_Flag)
table.div(table.sum(1).astype(float), axis=0).plot(kind='bar', stacked=True)
plt.title('Stacked Bar Chart of Marital Status vs Attrition')
plt.xlabel('Marital Status')
plt.ylabel('Proportion of Customers')
plt.savefig('mariral_vs_pur_stack')

table=pd.crosstab(df.Education_Level,df.Attrition_Flag)
table.div(table.sum(1).astype(float), axis=0).plot(kind='bar', stacked=True)
plt.title('Stacked Bar Chart of Education vs Attrition Flag')
plt.xlabel('Education')
plt.ylabel('Proportion of Customers')
plt.savefig('edu_vs_pur_stack')

pd.crosstab(df.Income_Category,df.Attrition_Flag).plot(kind='bar')
plt.title('Income Category vs Attribition')
plt.xlabel('Income Category')
plt.ylabel('Proportion of Customers')
plt.savefig('Income_bar')

df.dtypes

df = pd.get_dummies(df, columns = ['Gender','Education_Level','Marital_Status','Income_Category','Card_Category'])

df.head()

from sklearn.linear_model import LogisticRegression
from sklearn import metrics
from sklearn.model_selection import train_test_split
X = df.drop(columns= ['CLIENTNUM','Attrition_Flag'])
y = df['Attrition_Flag']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)
logreg = LogisticRegression()
logreg.fit(X_train, y_train)

y_pred = logreg.predict(X_test)
print('Accuracy of logistic regression classifier on test set: {:.2f}'.format(logreg.score(X_test, y_test)))

from sklearn.metrics import confusion_matrix
confusion_matrix = confusion_matrix(y_test, y_pred)
print(confusion_matrix)